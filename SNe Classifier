{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"SNe Classifier","private_outputs":true,"provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"rZJJ4Qi10tsW"},"source":["# Cloning and Imports"]},{"cell_type":"code","metadata":{"id":"5NhfjwLy0tsY"},"source":["from astropy.visualization import ZScaleInterval\n","import datetime\n","from IPython.display import display\n","import matplotlib.pyplot as plt\n","from multiprocessing.pool import ThreadPool\n","import numpy as np\n","import pathlib\n","from sklearn.metrics import roc_curve, auc, confusion_matrix, multilabel_confusion_matrix\n","from sklearn.model_selection import train_test_split\n","import tensorflow as tf\n","import tensorflow_addons as tfa\n","from tqdm.auto import tqdm"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8l_EjP500tsc"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"a0RZlCg70tsg"},"source":["Cloning Dr. Duev's CNN model"]},{"cell_type":"code","metadata":{"id":"72OxGilF0tsg"},"source":["!git clone https://github.com/dmitryduev/ay119.git"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"D9JaOmb10tsk"},"source":["Creaing the path's from which to gather data and the model."]},{"cell_type":"code","metadata":{"id":"ijRnOppS0tsk"},"source":["path_base = '/content/'\n","path_data = '/content/ay119/deep_learning/data'\n","\n","leah_path_data = '/content/drive/My Drive/Leah_SURF/Data'\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qbN9PDxq0tsn"},"source":["# Data Setup"]},{"cell_type":"markdown","metadata":{"id":"iJJdPi7d0tsn"},"source":["Helper function to normalize data and upload the data as a numpy array from Leah's Google Drive folder."]},{"cell_type":"code","metadata":{"id":"fAbq2q9O0tso"},"source":["def load_helper(pp):\n","    data = np.load(pp)\n","    for i in range(3):\n","        data[..., i] /= np.linalg.norm(data[..., i])\n","    return data"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ksxJwJMR0tsq"},"source":["p = pathlib.Path(leah_path_data)\n","\n","n_bogus = len(list((p / 'bogus').glob('*.npy')))\n","n_realsn = len(list((p / 'realsn').glob('*.npy')))\n","n_realagn = len(list((p / 'realagn').glob('*.npy')))\n","n_bogus, n_realsn, n_realagn"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mAov4qo5VLEP"},"source":["with ThreadPool(processes=12) as pool:\n","    bogus = list(tqdm(pool.imap(load_helper, (p / 'bogus').glob('*.npy')), total=n_bogus))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"h87U5T9jXEIr"},"source":["with ThreadPool(processes=12) as pool:\n","    realsn = list(tqdm(pool.imap(load_helper, (p / 'realsn').glob('*.npy')), total=n_realsn))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GGm_E563WpTa"},"source":["with ThreadPool(processes=12) as pool:\n","    realagn = list(tqdm(pool.imap(load_helper, (p / 'realagn').glob('*.npy')), total=n_realagn))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4HYHaXcL0tsz"},"source":["bogus = np.array(bogus)\n","realsn = np.array(realsn)\n","realagn = np.array(realagn)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"41kIBLDC0ts2"},"source":["data = np.vstack((bogus, realsn, realagn))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"STZCeUFD0ts3"},"source":["bogus.shape, realsn.shape, realagn.shape, data.shape"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wPqtWEVa0ts5"},"source":["This labels the triplet images and provides the depth of the numpy array."]},{"cell_type":"code","metadata":{"id":"rfXFJwqG0ts6"},"source":["indexes = [0 for _ in range(bogus.shape[0])] +\\\n","    [1 for _ in range(realsn.shape[0])] +\\\n","    [2 for _ in range(realagn.shape[0])]\n","labels = tf.one_hot(indexes, depth=3, dtype=tf.int8).numpy()\n","labels.shape"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"eHrh7Vfb0ts7"},"source":["ind = np.random.randint(0, high=len(labels), size=3)\n","for ii in ind:\n","    print(f'label: {labels[ii]}')\n","    fig = plt.figure(figsize=(8, 2), dpi=100)\n","    triplet = data[ii]\n","    ax = fig.add_subplot(131)\n","    ax.axis('off')\n","    ax.imshow(triplet[:, :, 0], origin='lower', cmap=plt.cm.bone)\n","    ax2 = fig.add_subplot(132)\n","    ax2.axis('off')\n","    ax2.imshow(triplet[:, :, 1], origin='lower', cmap=plt.cm.bone)\n","    ax3 = fig.add_subplot(133)\n","    ax3.axis('off')\n","    ax3.imshow(triplet[:, :, 2], origin='lower', cmap=plt.cm.bone)\n","    plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Lxej7lCY0ts9"},"source":["# Model"]},{"cell_type":"code","metadata":{"id":"o6ZaDQEd0ts9"},"source":["model_name = 'braai_d6_m9.h5'\n","\n","if not (pathlib.Path(path_data) / model_name).exists():\n","    !wget https://github.com/dmitryduev/kowalski/raw/master/kowalski/models/braai_d6_m9.h5"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cjW0OmBF0ts_"},"source":["model = tf.keras.models.load_model('braai_d6_m9.h5')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xilcesgg0ttA"},"source":["This step removes the top layer of the Dr. Duev's CNN to then be replaced by a 3-Class Classifier rather than a 2-Class Classifier."]},{"cell_type":"code","metadata":{"id":"QLUX25Q60ttB"},"source":["model_fe = tf.keras.Model(inputs=model.input, outputs=[(model.layers[-2].output)])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"I4oEHL1_0ttC"},"source":["output = tf.keras.layers.Dense(3, activation='softmax')(model_fe.output)\n","model_tl = tf.keras.Model(inputs=model_fe.inputs, outputs=output)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"idd4pEnZ0ttE"},"source":["loss = 'categorical_crossentropy'\n","optimzr = 'adam'\n","# optimzr = tf.keras.optimizers.Adam(\n","#     lr=3e-4, beta_1=0.9, beta_2=0.999,\n","#     epsilon=None, decay=0.0, amsgrad=False\n","# )\n","metric = [\n","    tf.keras.metrics.CategoricalAccuracy(name='acc'), \n","    tf.keras.metrics.Precision(name='precision'), \n","    tf.metrics.Recall(name='recall'), \n","    tf.metrics.AUC(name='auc')\n","]\n","model_tl.compile(optimizer=optimzr, \n","                 loss=loss, \n","                 metrics=metric)\n","print(model_tl.summary())"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Zph-h8XX0ttF"},"source":["# Training"]},{"cell_type":"code","metadata":{"id":"vwFCo2NJ0ttF"},"source":["test_split = 0.1\n","val_size = 0.1\n","random_state = 42\n","validation_split = 0.1\n","\n","train_indexes, test_indexes = train_test_split(range(len(labels)), shuffle=True,\n","                                               test_size=test_split, random_state=random_state)\n","train_indexes, val_indexes = train_test_split(train_indexes, shuffle=True,\n","                                              test_size=val_size, random_state=random_state)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9kleIJu30ttG"},"source":["batch_size = 64\n","shuffle_buffer_size = 128\n","\n","epochs = 100"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Un_FW8xY0ttI"},"source":["x_train = tf.data.Dataset.from_tensor_slices((data[train_indexes], labels[train_indexes]))\n","x_val = tf.data.Dataset.from_tensor_slices((data[val_indexes], labels[val_indexes]))\n","x_test = tf.data.Dataset.from_tensor_slices((data[test_indexes], labels[test_indexes]))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"S_Cz_-nP0ttK"},"source":["#flipping:\n","x_train = x_train.cache().map(\n","    lambda image, label: (tf.image.random_flip_left_right(image), label)\n",").map(\n","    lambda image, label: (tf.image.random_flip_up_down(image), label)\n",").shuffle(shuffle_buffer_size).batch(batch_size).repeat(epochs)\n","x_val = x_val.batch(batch_size).repeat(epochs)\n","x_test = x_test.batch(batch_size)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"87AoKgi60ttL"},"source":["steps_per_epoch_train = len(train_indexes) // batch_size - 1\n","steps_per_epoch_val = len(val_indexes) // batch_size - 1\n","steps_per_epoch_test = len(test_indexes) // batch_size - 1\n","steps_per_epoch_train, steps_per_epoch_val, steps_per_epoch_test"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6LdKi4ka0ttN"},"source":["# make train and test masks:\n","_, _, mask_train, mask_test = train_test_split(labels, list(range(len(labels))),\n","                                                   test_size=test_split, random_state=random_state)\n","masks = {'training': mask_train, 'test': mask_test}"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qReBN2nZ0ttO"},"source":["early_stopping_callback = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=20\n","                                                           , restore_best_weights=True)\n","h = model_tl.fit(x_train, epochs=epochs, \n","                 steps_per_epoch=steps_per_epoch_train, callbacks=early_stopping_callback,\n","                 validation_data=x_val, validation_steps=steps_per_epoch_val, \n","                 verbose=1)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8Qs90Je9qw3n"},"source":["# Recall Model"]},{"cell_type":"code","metadata":{"id":"NYzKdFA6q2lg"},"source":["# save = False\n","\n","# if save:\n","#     tag = \"tl_3c_v1\"\n","\n","#     path_model = p / \"models\" / f\"{tag}.{datetime.datetime.utcnow().strftime('%Y%m%d_%H%M%S')}.h5\"\n","#     if not path_model.parent.exists():\n","#         path_model.parent.mkdir(parents=True, exist_ok=True)\n","#     tf.keras.models.save_model(model_tl, path_model)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2Swikij2tkQc"},"source":["p = pathlib.Path(leah_path_data)\n","path_model = p / 'models' / 'tl_3c_v1.20200728_231801.h5'\n","model_tl = tf.keras.models.load_model(path_model)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GgsNDJxZM_e9"},"source":["# Quantization Aware Training"]},{"cell_type":"markdown","metadata":{"id":"DHCH72LrNwoL"},"source":["# ! pip uninstall -y tensorflow\n","# ! pip install -q tf-nightly\n","# ! pip install -q tensorflow-model-optimization\n","\n","# import tensorflow_model_optimization as tfmot\n","\n","# quantize_model = tfmot.quantization.keras.quantize_model\n","\n","# # q_aware stands for for quantization aware.\n","# q_aware_model = quantize_model(model_tl)\n","\n","# # `quantize_model` requires a recompile.\n","# q_aware_model.compile(optimizer='adam',\n","#               loss=tf.keras.losses.CategoricalCrossentropy(from_logits=True),\n","#               metrics=['accuracy'])\n","\n","# q_aware_model.summary()"]},{"cell_type":"code","metadata":{"id":"6c43ClIeOgNU"},"source":["# q_aware_model.fit(x_train, epochs=epochs, \n","#                  steps_per_epoch=steps_per_epoch_train, callbacks=early_stopping_callback,\n","#                  validation_data=x_val, validation_steps=steps_per_epoch_val, \n","#                  verbose=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_F9K6q4nSwml"},"source":["# _, baseline_model_accuracy = model_tl.evaluate(\n","#     data[val_indexes], labels[val_indexes], verbose=0)\n","\n","# _, q_aware_model_accuracy = q_aware_model.evaluate(\n","#    x_val, verbose=0)\n","\n","# print('Baseline test accuracy:', baseline_model_accuracy)\n","# print('Quant test accuracy:', q_aware_model_accuracy)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"N4PF_VWCM_AF"},"source":["# converter = tf.lite.TFLiteConverter.from_keras_model(model_tl)\n","# converter.optimizations = [tf.lite.Optimize.DEFAULT]\n","# quantized_tflite_model = converter.convert()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mOR0tc7s0ttR"},"source":["# Evalutation"]},{"cell_type":"markdown","metadata":{"id":"t15KuJrz0ttT"},"source":["####Provides useful information on the misclassification and provides basic information on the evaluation of the data."]},{"cell_type":"code","metadata":{"id":"mkdoTynh0ttT"},"source":["print('Evaluating on test set for loss and accuracy:')\n","preds = model_tl.evaluate(x_test, batch_size=batch_size, verbose=1)\n","test_loss = float(preds[0])\n","test_accuracy = float(preds[1])\n","print(\"Loss = \" + str(test_loss))\n","print(\"Test Accuracy = \" + str(test_accuracy))\n","\n","print('Evaluating on training set to check misclassified samples:')\n","preds = model_tl.predict(x=x_test, batch_size=batch_size, verbose=1)\n","\n","labels_pred = np.rint(preds)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wjqnZ2S20ttV"},"source":["####Training vs. validation accuracy"]},{"cell_type":"code","metadata":{"id":"CwQ6r7Qn0ttV"},"source":["if 'accuracy' in h.history:\n","    train_acc = h.history['accuracy']\n","    val_acc = h.history['val_accuracy']\n","else:\n","    train_acc = h.history['acc']\n","    val_acc = h.history['val_acc']\n","\n","train_loss = h.history['loss']\n","val_loss = h.history['val_loss']\n","\n","fig = plt.figure(figsize=(7, 3), dpi=100)\n","ax = fig.add_subplot(121)\n","ax.plot(train_acc, label='Training', linewidth=1.2, color='hotpink')\n","ax.plot(val_acc, label='Validation', linewidth=1.2, color='deeppink')\n","ax.set_xlabel('Epoch')\n","ax.set_ylabel('Accuracy')\n","ax.legend(loc='best')\n","ax.grid(True, linewidth=.3)\n","\n","ax2 = fig.add_subplot(122)\n","ax2.plot(train_loss, label='Training', linewidth=1.2, color='hotpink')\n","ax2.plot(val_loss, label='Validation', linewidth=1.2, color='deeppink')\n","ax2.set_xlabel('Epochs')\n","ax2.set_ylabel('Loss')\n","ax2.legend(loc='best')\n","ax2.grid(True, linewidth=.3)\n","plt.tight_layout()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"r-fWnEX70ttX"},"source":["#### Confusion matrices with score threshold=0.5"]},{"cell_type":"code","metadata":{"id":"3wYFBoLg0ttX"},"source":["def plot_confusion_matrix(cm, classes,\n","                          normalize=False,\n","                          title='Confusion matrix',\n","                          cmap=plt.cm.Purples):\n","    \"\"\"\n","    This function prints and plots the confusion matrix.\n","    Normalization can be applied by setting `normalize=True`.\n","    \"\"\"\n","    import itertools\n","    if normalize:\n","        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n","        print(\"Normalized confusion matrix\")\n","    else:\n","        print('Confusion matrix, without normalization')\n","\n","    print(cm)\n","    \n","\n","    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n","    plt.title(title)\n","    plt.colorbar()\n","    tick_marks = np.arange(len(classes))\n","    plt.xticks(tick_marks, classes, rotation=45)\n","    plt.yticks(tick_marks, classes)\n","\n","    fmt = '.2f' if normalize else 'd'\n","    thresh = cm.max() / 2.\n","    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n","        plt.text(j, i, format(cm[i, j], fmt),\n","                 horizontalalignment=\"center\",\n","                 color=\"white\" if cm[i, j] > thresh else \"black\")\n","\n","    plt.ylabel('True label')\n","    plt.xlabel('Predicted label')\n","    plt.tight_layout()\n","    plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8Kf0hZ16f6Qr"},"source":["labels[test_indexes].shape, labels_pred.shape"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SGBX9-vTxyYz"},"source":["Decode one-hot encoding:"]},{"cell_type":"code","metadata":{"id":"F4qCjVRrw09w"},"source":["y_true = np.argmax(labels[test_indexes], axis=1)\n","y_pred = np.argmax(labels_pred, axis=1)\n","y_true.shape, y_pred.shape"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Fzkfwuaf0ttc"},"source":["confusion_matr = confusion_matrix(y_true, y_pred)\n","confusion_matr_normalized = confusion_matr.astype('float') / confusion_matr.sum(axis=1)[:, np.newaxis]\n","\n","print('Confusion matrix:')\n","print(confusion_matr)\n","\n","print('Normalized confusion matrix:')\n","print(confusion_matr_normalized)\n","\n","# plot:\n","plot_confusion_matrix(confusion_matr, classes=['bogus', 'supernova', 'AGN'])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"A99ZwdnFyZLb"},"source":["Multi-label confusion matrices:"]},{"cell_type":"code","metadata":{"id":"_Wr3YeVLyYMn"},"source":["confusion_matr_multilabel = multilabel_confusion_matrix(labels[test_indexes], labels_pred)\n","confusion_matr_multilabel_normalized = \\\n","    confusion_matr_multilabel.astype('float') / confusion_matr_multilabel.sum(axis=1)[:, np.newaxis]\n","\n","print('Confusion matrices:')\n","print(confusion_matr_multilabel)\n","\n","print('Normalized confusion matrices:')\n","print(confusion_matr_multilabel_normalized)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oJnwK4mGJRaD"},"source":["#### Misclassified Analysis"]},{"cell_type":"markdown","metadata":{"id":"e-FCmTaRJq8F"},"source":["The SN misclassified as AGN are plotted."]},{"cell_type":"code","metadata":{"id":"m-pNfO5e6M5l"},"source":["max_label = len(labels[test_indexes])\n","i = 0\n","counter = 0\n","while i < max_label:\n","  w = y_pred[i] == 2\n","  z = y_true[i] == 1\n","  if w.all() & z.all():\n","    counter += 1\n","    print(counter)\n","    print(f'label: {labels[test_indexes][i]}')\n","    fig = plt.figure(figsize=(8, 2), dpi=100)\n","    triplet = data[test_indexes][i]\n","    ax = fig.add_subplot(131)\n","    ax.axis('off')\n","    ax.imshow(triplet[:, :, 0], origin='lower', cmap=plt.cm.bone)\n","    ax2 = fig.add_subplot(132)\n","    ax2.axis('off')\n","    ax2.imshow(triplet[:, :, 1], origin='lower', cmap=plt.cm.bone)\n","    ax3 = fig.add_subplot(133)\n","    ax3.axis('off')\n","    ax3.imshow(triplet[:, :, 2], origin='lower', cmap=plt.cm.bone)\n","    plt.show()\n","  i += 1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"thYvpOcZE1Cx"},"source":["# freeze_graph \\\n","#   --input_graph=eval_graph_def.pb \\\n","#   --input_checkpoint=checkpoint \\\n","#   --output_graph=frozen_eval_graph.pb --output_node_names=outputs"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ilAxDZbRFYbo"},"source":["# toco \\\n","#   --input_file=frozen_eval_graph.pb \\\n","#   --output_file=tflite_model.tflite \\\n","#   --input_format=TENSORFLOW_GRAPHDEF --output_format=TFLITE \\\n","#   --inference_type=QUANTIZED_UINT8 \\\n","#   --input_shape=\"64, 64,3\" \\\n","#   --input_array=input \\\n","#   --output_array=outputs \\\n","#   --std_value=127.5 --mean_value=127.5"],"execution_count":null,"outputs":[]}]}